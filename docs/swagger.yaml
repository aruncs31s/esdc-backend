basePath: /
definitions:
  dto.AdminRegisterRequest:
    description: Admin user registration request payload
    properties:
      email:
        description: Email address
        example: aruncs31ss@gmail.com
        type: string
      github_username:
        description: GitHub username (optional)
        example: aruncs31s
        type: string
      name:
        description: Full name
        example: Arun CS
        type: string
      password:
        description: Password (minimum 6 characters)
        example: password123
        minLength: 6
        type: string
      role:
        description: User role (e.g., "admin", "user")
        example: admin
        type: string
      username:
        description: Username (optional)
        example: aruncs31s
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.LoginRequest:
    description: Login request payload
    properties:
      email:
        description: Username string `json:"username" binding:"required"`
        example: user@example.com
        type: string
      password:
        description: User password
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  dto.ProjectCreation:
    description: Project creation request payload
    properties:
      contributers:
        description: Contributor user IDs
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
      description:
        description: Project description
        example: This is a sample project description
        type: string
      image:
        description: Project image URL
        example: https://example.com/image.jpg
        type: string
      link:
        description: Project link
        example: https://github.com/user/project
        type: string
      name:
        description: Project name
        example: My Project
        type: string
      tags:
        description: Project tags
        example:
        - go
        - api
        - backend
        items:
          type: string
        type: array
    type: object
  dto.RegisterRequest:
    description: User registration request payload
    properties:
      email:
        description: Email address
        example: aruncs31ss@gmail.com
        type: string
      github_username:
        description: GitHub username (optional)
        example: aruncs31s
        type: string
      name:
        description: Full name
        example: Arun CS
        type: string
      password:
        description: Password (minimum 6 characters)
        example: password123
        minLength: 6
        type: string
      username:
        description: Username (optional)
        example: aruncs31s
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:9090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the ESDC Backend API server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ESDC Backend API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users - requires admin role
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - admin role required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve users
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users (Admin only)
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new user - requires admin role
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - admin role required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user (Admin only)
      tags:
      - admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID - requires admin role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - admin role required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete user
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete user (Admin only)
      tags:
      - admin
  /admin/users/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about users - requires admin role
      produces:
      - application/json
      responses:
        "200":
          description: User stats retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - admin role required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve user stats
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user statistics (Admin only)
      tags:
      - admin
  /cart:
    get:
      consumes:
      - application/json
      description: Get all items in the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Add a product to the authenticated user's cart
      parameters:
      - description: Add to cart request
        in: body
        name: request
        required: true
        schema:
          properties:
            product_id:
              type: integer
            quantity:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Product added to cart
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add product to cart
      tags:
      - cart
  /cart/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific item from the cart
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from cart
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid cart item ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update the quantity of a specific cart item
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update cart request
        in: body
        name: request
        required: true
        schema:
          properties:
            quantity:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Cart updated
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Error updating cart
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update cart item quantity
      tags:
      - cart
  /cart/clear:
    delete:
      consumes:
      - application/json
      description: Remove all items from the authenticated user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart cleared
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Clear user's cart
      tags:
      - cart
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /messages:
    get:
      consumes:
      - application/json
      description: Retrieve all chat messages history
      produces:
      - application/json
      responses:
        "200":
          description: Messages retrieved successfully
          schema:
            additionalProperties: true
            type: object
      summary: Get chat messages
      tags:
      - chat
  /orders:
    get:
      consumes:
      - application/json
      description: Get all orders for the authenticated user with pagination
      parameters:
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with the specified items
      parameters:
      - description: Create order request
        in: body
        name: request
        required: true
        schema:
          properties:
            items:
              items:
                properties:
                  product_id:
                    type: integer
                  quantity:
                    type: integer
                type: object
              type: array
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific order by its ID for the authenticated user
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid order ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated or unauthorized access
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve all posts - requires admin role
      produces:
      - application/json
      responses:
        "200":
          description: Posts retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - admin role required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to retrieve posts
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all posts (Admin only)
      tags:
      - posts
  /products:
    get:
      consumes:
      - application/json
      description: Get all products with optional filtering by category and search
      parameters:
      - description: Product category
        in: query
        name: category
        type: string
      - description: Search term for name or description
        in: query
        name: search
        type: string
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      summary: Get product by ID
      tags:
      - products
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieve all projects
      produces:
      - application/json
      responses:
        "200":
          description: Projects retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "404":
          description: No projects found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project with the provided data
      parameters:
      - description: Project creation data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectCreation'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to create project
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: registerData
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /upload/file:
    post:
      consumes:
      - multipart/form-data
      description: Upload a single file of any type with max size 10MB
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      - default: files
        description: Upload directory
        in: query
        name: dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid file or no file uploaded
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to upload file
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload a file
      tags:
      - files
  /upload/files:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple files of any type with max size 10MB each
      parameters:
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      - default: files
        description: Upload directory
        in: query
        name: dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Files upload completed
          schema:
            additionalProperties: true
            type: object
        "400":
          description: No files uploaded or failed to parse form
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload multiple files
      tags:
      - files
  /upload/image:
    post:
      consumes:
      - multipart/form-data
      description: Upload a single image file (jpg, jpeg, png, gif, webp) with max
        size 5MB
      parameters:
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid file or no file uploaded
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to upload image
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload an image
      tags:
      - files
  /wishlist:
    get:
      consumes:
      - application/json
      description: Get all items in the authenticated user's wishlist
      produces:
      - application/json
      responses:
        "200":
          description: Wishlist retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's wishlist
      tags:
      - wishlist
    post:
      consumes:
      - application/json
      description: Add a product to the authenticated user's wishlist
      parameters:
      - description: Add to wishlist request
        in: body
        name: request
        required: true
        schema:
          properties:
            product_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Product added to wishlist
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Product already in wishlist
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add product to wishlist
      tags:
      - wishlist
  /wishlist/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific item from the wishlist
      parameters:
      - description: Wishlist item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from wishlist
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid wishlist item ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove item from wishlist
      tags:
      - wishlist
  /ws:
    get:
      consumes:
      - application/json
      description: Establish WebSocket connection for real-time chat
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: WebSocket chat endpoint
      tags:
      - chat
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
